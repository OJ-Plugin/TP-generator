name: Tauri Build and Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `${context.ref}`.replace('refs/tags/', ''),
              name: `${context.ref}`.replace('refs/tags/', ''),
              draft: true,
              prerelease: false
            });
            return data.id

  build-tauri:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - platform: macos-latest
            target: macos
          - platform: ubuntu-latest
            target: linux
          - platform: windows-latest
            target: windows

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "npm"

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies (Linux)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libxdo-dev

      - name: Install frontend dependencies
        run: npm ci

      # macOS 图标处理
      - name: Generate app icons for macOS
        if: matrix.platform == 'macos-latest'
        run: |
          mkdir -p src-tauri/icons/
          brew install imagemagick
          # 使用 magick 命令代替 convert
          magick icon.png -resize 32x32 src-tauri/icons/32x32.png
          magick icon.png -resize 64x64 src-tauri/icons/64x64.png
          magick icon.png -resize 128x128 src-tauri/icons/128x128.png
          magick icon.png -resize 256x256 src-tauri/icons/128x128@2x.png
          magick icon.png -resize 256x256 src-tauri/icons/256x256.png
          magick icon.png -resize 512x512 src-tauri/icons/256x256@2x.png
          magick icon.png -resize 512x512 src-tauri/icons/512x512.png
          magick icon.png -resize 1024x1024 src-tauri/icons/512x512@2x.png
          magick icon.png -resize 1024x1024 src-tauri/icons/icon.png

          # 直接使用 imagemagick 创建 icns 文件
          magick src-tauri/icons/*.png src-tauri/icons/icon.icns

      # Linux 图标处理
      - name: Generate app icons for Linux
        if: matrix.platform == 'ubuntu-latest'
        run: |
          mkdir -p src-tauri/icons/
          sudo apt-get install -y imagemagick
          convert icon.png -resize 32x32 src-tauri/icons/32x32.png
          convert icon.png -resize 64x64 src-tauri/icons/64x64.png
          convert icon.png -resize 128x128 src-tauri/icons/128x128.png
          convert icon.png -resize 256x256 src-tauri/icons/128x128@2x.png
          convert icon.png -resize 256x256 src-tauri/icons/256x256.png
          convert icon.png -resize 512x512 src-tauri/icons/256x256@2x.png
          convert icon.png -resize 512x512 src-tauri/icons/512x512.png
          convert icon.png -resize 1024x1024 src-tauri/icons/512x512@2x.png
          convert icon.png -resize 1024x1024 src-tauri/icons/icon.png

          # 创建一个空的 .icns 文件以满足 Tauri 的要求
          cp src-tauri/icons/icon.png src-tauri/icons/icon.icns

          # 创建 .ico 文件以满足 Tauri 的要求
          convert src-tauri/icons/32x32.png src-tauri/icons/128x128.png src-tauri/icons/256x256.png src-tauri/icons/icon.ico

      # Windows 图标处理
      - name: Generate app icons for Windows
        if: matrix.platform == 'windows-latest'
        run: |
          mkdir -p src-tauri/icons/
          # 在 Windows 上安装 ImageMagick
          choco install imagemagick -y
          magick icon.png -resize 32x32 src-tauri/icons/32x32.png
          magick icon.png -resize 128x128 src-tauri/icons/128x128.png
          magick icon.png -resize 256x256 src-tauri/icons/256x256.png
          magick icon.png -resize 256x256 src-tauri/icons/icon.ico

      # Build the app
      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }} # 用于 sign
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }} #（如果 set password 则加）

        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}

      # 找到并上传构建产物
      - name: Find built artifact
        id: find-artifact
        shell: bash
        run: |
          set -e
          if [[ "${{ matrix.platform }}" == "windows-latest" ]]; then
            artifact=$(find src-tauri/target/release/bundle/msi -name '*.msi' | head -n 1)
            echo "artifact_path=$artifact" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
            artifact=$(find src-tauri/target/release/bundle/dmg -name '*.dmg' | head -n 1)
            echo "artifact_path=$artifact" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.platform }}" == "ubuntu-latest" ]]; then
            artifact=$(find src-tauri/target/release/bundle/appimage -name '*.AppImage' | head -n 1)
            echo "artifact_path=$artifact" >> $GITHUB_OUTPUT
          fi

      # 生成签名 signature 文件（标准 tauri-signer 调用，可以参考官方文档）
      - name: Generate signature
        id: sign-artifact
        shell: bash
        run: |
          set -e
          if [[ "${{ matrix.platform }}" == "windows-latest" ]]; then
            ARTIFACT=${{ steps.find-artifact.outputs.artifact_path }}
            tauri signer sign "$ARTIFACT" --private-key "$TAURI_PRIVATE_KEY" > "$ARTIFACT.sig"
            echo "signature_path=$ARTIFACT.sig" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
            ARTIFACT=${{ steps.find-artifact.outputs.artifact_path }}
            tauri signer sign "$ARTIFACT" --private-key "$TAURI_PRIVATE_KEY" > "$ARTIFACT.sig"
            echo "signature_path=$ARTIFACT.sig" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.platform }}" == "ubuntu-latest" ]]; then
            ARTIFACT=${{ steps.find-artifact.outputs.artifact_path }}
            tauri signer sign "$ARTIFACT" --private-key "$TAURI_PRIVATE_KEY" > "$ARTIFACT.sig"
            echo "signature_path=$ARTIFACT.sig" >> $GITHUB_OUTPUT
          fi

        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}

      # 上传产物和 signature 文件
      - name: Upload built artifact for latest.json
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: |
            ${{ steps.find-artifact.outputs.artifact_path }}
            ${{ steps.sign-artifact.outputs.signature_path }}

  publish-release:
    runs-on: ubuntu-latest
    needs: [create-release, build-tauri]
    steps:
      - name: Publish release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false
            });

  generate-and-upload-latest-json:
    needs: [build-tauri, create-release, publish-release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Generate latest.json
        shell: bash
        run: |
          VERSION="${{ github.ref_name }}"

          WIN_PATH=$(find artifacts/windows -name '*.msi' | head -n 1)
          MAC_PATH=$(find artifacts/macos -name '*.dmg' | head -n 1)
          LIN_PATH=$(find artifacts/linux -name '*.AppImage' | head -n 1)

          WIN_SIG=$(cat "${WIN_PATH}.sig")
          MAC_SIG=$(cat "${MAC_PATH}.sig")
          LIN_SIG=$(cat "${LIN_PATH}.sig")

          WIN_FILE=$(basename "$WIN_PATH")
          MAC_FILE=$(basename "$MAC_PATH")
          LIN_FILE=$(basename "$LIN_PATH")

          WIN_URL="https://github.com/${{ github.repository }}/releases/download/${VERSION}/$WIN_FILE"
          MAC_URL="https://github.com/${{ github.repository }}/releases/download/${VERSION}/$MAC_FILE"
          LIN_URL="https://github.com/${{ github.repository }}/releases/download/${VERSION}/$LIN_FILE"

          cat << EOF > latest.json
          {
            "version": "${VERSION}",
            "platforms": {
              "windows-x86_64": {
                "signature": "$WIN_SIG",
                "url": "$WIN_URL"
              },
              "darwin-aarch64": {
                "signature": "$MAC_SIG",
                "url": "$MAC_URL"
              },
              "linux-x86_64": {
                "signature": "$LIN_SIG",
                "url": "$LIN_URL"
              }
            }
          }
          EOF

      - name: Upload latest.json to Release
        uses: softprops/action-gh-release@v1
        with:
          files: latest.json
          tag_name: ${{ github.ref_name }}

